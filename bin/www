#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("server:server");
var http = require("http");
var https = require("https");
var fs = require("fs");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * HTTPS 인증서 경로 (실제 경로로 수정 필요)
 */
// var options = {
//   key: fs.readFileSync("/home/ec2-user/certs/selfsigned.key"),
//   cert: fs.readFileSync("/home/ec2-user/certs/selfsigned.crt"),
// };

/**
 * Create HTTPS server.
 */
// var httpsServer = https.createServer(options, app);
var httpServer = http.createServer(app);
httpServer.on("listening", onListening).on("error", onError);

/**
 * HTTP -> HTTPS 리다이렉트 서버
 */
// http.createServer(function (req, res) {
//   res.writeHead(301, { "Location": "https://" + req.headers['host'] + req.url });
//   res.end();
// }).listen(80);

/**
 * Listen on provided port, on all network interfaces.
 */
// httpsServer.listen(443);
// httpsServer.on("error", onError);
// httpsServer.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTPS server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }
  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTPS server "listening" event.
 */
function onListening() {
  console.log("onListening");
  var addr = httpServer.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log(`Server is running at http://localhost:${addr.port}`);
  debug("Listening on " + bind);
}
